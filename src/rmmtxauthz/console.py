"""CLI entrypoints for rmmtxauthz"""

import logging
import json
import asyncio

import click
import aiohttp
from libadvian.logging import init_logging

from rmmtxauthz import __version__
from .config import RMMTXSettings
from .web.application import get_app_no_init

LOGGER = logging.getLogger(__name__)


@click.group()
@click.version_option(version=__version__)
@click.pass_context
@click.option("-v", "--verbose", count=True, help="Shorthand for info/debug loglevel (-v/-vv)")
def cli_group(ctx: click.Context, verbose: int) -> None:
    """CLI helpers for RASENMAEHER developers"""
    _ = ctx
    config = RMMTXSettings.singleton()
    loglevel = getattr(logging, config.log_level.upper(), 30)
    if verbose == 1:
        loglevel = 20
    if verbose >= 2:
        loglevel = 10
    init_logging(loglevel)
    LOGGER.setLevel(loglevel)


@cli_group.command(name="config")
@click.pass_context
def print_config(ctx: click.Context) -> None:
    """Print the currently resolved config"""
    conf = RMMTXSettings.singleton()
    click.echo(repr(conf))
    ctx.exit(0)


@cli_group.command(name="openapi")
@click.pass_context
def dump_openapi(ctx: click.Context) -> None:
    """Dump autogenerated openapi spec as JSON"""
    app = get_app_no_init()
    click.echo(json.dumps(app.openapi()))
    ctx.exit(0)


@cli_group.command(name="healthcheck")
@click.option("--host", default="localhost", help="The host to connect to")
@click.option("--port", default=8005, help="The port to connect to")
@click.option("--timeout", default=2.0, help="The timeout in seconds")
@click.pass_context
def do_http_healthcheck(ctx: click.Context, host: str, port: int, timeout: float) -> None:
    """
    Do a GET request to the healthcheck api and dump results to stdout
    """

    async def doit() -> int:
        """The actual work"""
        nonlocal host, port, timeout
        if "://" not in host:
            host = f"http://{host}"
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(f"{host}:{port}/api/v1/healthcheck") as resp:
                if resp.status != 200:
                    return int(resp.status)
                payload = await resp.json()
                click.echo(json.dumps(payload))
                if not payload["healthy"]:
                    return 1
        return 0

    ctx.exit(asyncio.get_event_loop().run_until_complete(doit()))


def rmmtxauthz_cli() -> None:
    """Backend for the IoT devices"""
    init_logging(logging.WARNING)
    cli_group()  # pylint: disable=no-value-for-parameter
