"""CLI entrypoints for rmmtxauthz"""

import logging
import json

import click
from libadvian.logging import init_logging

from rmmtxauthz import __version__
from .config import RMMTXSettings
from .web.application import get_app_no_init

LOGGER = logging.getLogger(__name__)


@click.group()
@click.version_option(version=__version__)
@click.pass_context
@click.option("-v", "--verbose", count=True, help="Shorthand for info/debug loglevel (-v/-vv)")
def cli_group(ctx: click.Context, verbose: int) -> None:
    """CLI helpers for RASENMAEHER developers"""
    _ = ctx
    config = RMMTXSettings.singleton()
    loglevel = getattr(logging, config.log_level.upper(), 30)
    if verbose == 1:
        loglevel = 20
    if verbose >= 2:
        loglevel = 10
    init_logging(loglevel)
    LOGGER.setLevel(loglevel)


@cli_group.command(name="config")
@click.pass_context
def print_config(ctx: click.Context) -> None:
    """Print the currently resolved config"""
    conf = RMMTXSettings.singleton()
    click.echo(repr(conf))
    ctx.exit(0)


@cli_group.command(name="openapi")
@click.pass_context
def dump_openapi(ctx: click.Context) -> None:
    """Dump autogenerated openapi spec as JSON"""
    app = get_app_no_init()
    click.echo(json.dumps(app.openapi()))
    ctx.exit(0)


def rmmtxauthz_cli() -> None:
    """Backend for the IoT devices"""
    init_logging(logging.WARNING)
    cli_group()  # pylint: disable=no-value-for-parameter
